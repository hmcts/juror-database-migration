-- Generated by Ora2Pg, the Oracle database Schema converter, version 24.0
-- Copyright 2000-2023 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=172.17.0.5;sid=xe;port=1521

SET client_encoding TO 'UTF8';

SET search_path = "JUROR",public;
\set ON_ERROR_STOP ON

CREATE OR REPLACE PACKAGE printfiles_to_clob AS
	PROCEDURE extract(p_limit number default 1000000);
END printfiles_to_clob;





CREATE OR REPLACE PACKAGE BODY printfiles_to_clob AS

ext_date		DATE := case when to_number(to_char(sysdate,'SSSSS')) < 64800
              			then sysdate - 1
               			else sysdate
              			end;
g_limit number;

PROCEDURE write_to_clob(p_FormType varchar2, p_RecordLength number);


/***********************************************************************
* PROCEDURE EXTRACT
***********************************************************************/

PROCEDURE extract(p_limit number default 1000000) IS

  CURSOR c1 is SELECT * FROM FORM_ATTR;
  
BEGIN

 g_Limit := p_limit;
		   FOR i in c1 loop
		     -- Write deatils into flat file
			  begin
		       write_to_clob( i.form_type, i.max_rec_len);
			  end;
		  END LOOP;
  commit;

EXCEPTION
	WHEN OTHERS THEN
	    rollback;
		dbms_output.put_line('Rollback');
		RAISE_APPLICATION_ERROR(-20008, 'Error in Extract Procedure');
		raise;

END extract;


/***********************************************************************
* PROCEDURE write_to_clob
*
* 26/2/15 Strip out CRLF (end of line) characters.
*         Replacing with space to preserve fixed width columns
*
***********************************************************************/

PROCEDURE write_to_clob(p_FormType varchar2, p_RecordLength number) IS

 CURSOR c_extract(c_FormType varchar2) is
               SELECT rowid row_id , replace(replace(detail_rec,chr(10),' '),chr(13),' ') detail_rec
			   FROM print_files
			   WHERE form_type = p_FormType
			   AND   decode(extracted_flag,NULL,'N',NULL) = 'N'
			   AND trunc(creation_date) <= ext_date;
			   
  TYPE detail_array is table of print_files.DETAIL_REC%TYPE index by binary_integer;
  l_data detail_array;
  
  TYPE rowid_array is table of ROWID index by binary_integer;
  l_rowid rowid_array;
			   
 c_lob clob;
 l_count number := 0;
 l_fileName print_files.PRINTFILE_NAME%TYPE;
 l_Header	varchar2(300);
 
BEGIN
 
   OPEN c_extract(p_FormType);
      LOOP
	     FETCH c_extract BULK COLLECT into l_rowid, l_data limit g_limit;
		 
		       l_count := l_data.count;
			  IF l_count > 0 THEN 
		       SELECT 'JURY'||lpad(data_file_no.nextval,4,'0')||lpad(print_Transmission, 2,'0') || '.' || lpad(print_Transmission, 4, '0'),
			          rpad('   ' || rpad(p_FormType,16) || lpad(l_count ,6,0) || lpad(l_count ,6,0) || '50' || lpad(p_RecordLength ,8,0),256,' ') 
			   INTO l_fileName , l_Header
			   FROM system_file
			   where owner = '400';
			   
		       insert into content_store(request_id, document_id,file_type, data) 
			                     values (content_store_seq.nextval,l_FileName,'PRINT',empty_clob() ) 
			   returning data into c_lob;
			   dbms_lob.write( c_lob,length(l_header||chr(10)), 1,l_header||chr(10));
		      
			  FOR j in 1.. l_data.count LOOP
			   dbms_lob.writeappend( c_lob, length(l_data(j)||chr(10)), l_data(j)||chr(10) );
			   update print_files set  extracted_flag = 'Y'	where rowid = l_rowid(j);
			  END LOOP;
			  
			  commit;  
			 END IF; 
			EXIT WHEN c_extract%NOTFOUND;   
	  END LOOP;	 	   
exception
  when others then
    		RAISE_APPLICATION_ERROR(-20008, 'Error in write_details Procedure');
		raise;
END write_to_clob;
END printfiles_to_clob;
