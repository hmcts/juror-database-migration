-- Generated by Ora2Pg, the Oracle database Schema converter, version 24.0
-- Copyright 2000-2023 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=172.17.0.5;sid=xe;port=1521

SET client_encoding TO 'UTF8';

SET search_path = "JUROR",public;
\set ON_ERROR_STOP ON

CREATE OR REPLACE PACKAGE Reset AS
 PROCEDURE clear_juror_data;
 PROCEDURE set_summoned_dates(p_pool_no varchar2, p_date date);
 PROCEDURE refresh_voters(p_loc_code varchar2 default '000');
end Reset; 



CREATE OR REPLACE PACKAGE BODY Reset AS

  PROCEDURE clear_juror_data is

  BEGIN
  
     execute immediate 'Truncate table attendance';
     execute immediate 'Truncate table part_expenses';
     execute immediate 'Truncate table appearances';
     execute immediate 'Truncate table acct_pay_data';
     execute immediate 'Truncate table audit_report';
     execute immediate 'Truncate table audit_f_report';

     execute immediate 'Truncate table def_lett';
     execute immediate 'Truncate table exc_lett';
     execute immediate 'Truncate table fta_lett';
     execute immediate 'Truncate table disq_lett';
     execute immediate 'Truncate table exc_denied_lett';
     execute immediate 'Truncate table request_lett';
     execute immediate 'Truncate table def_denied';
     execute immediate 'Truncate table aramis_payments';
     execute immediate 'Truncate table cert_lett';
     execute immediate 'Truncate table confirm_lett';
     execute immediate 'Truncate table postpone_lett';
     execute immediate 'Truncate table release_lett';

     execute immediate 'Truncate table panel';
     execute immediate 'Truncate table trial';

     execute immediate 'Truncate table phoenix_temp';
     execute immediate 'Truncate table juror';
     execute immediate 'Truncate table juror_court_police_check';

     execute immediate 'Truncate table current_trans';
     execute immediate 'Truncate table peak_usage';
     execute immediate 'Truncate table pool_stats';
     execute immediate 'Truncate table manuals';
     execute immediate 'Truncate table part_amendments';
     execute immediate 'Truncate table part_hist';
     execute immediate 'Truncate table phone_log';
     execute immediate 'Truncate table defer_dbf';
     execute immediate 'Truncate table pool_comments';
     execute immediate 'Truncate table pool_hist';
     execute immediate 'Truncate table pool';
     execute immediate 'Truncate table unique_pool';

     execute immediate 'Truncate table coroner_pool_detail';
     execute immediate 'Truncate table coroner_pool';

     execute immediate 'Truncate table holidays';

     execute immediate 'Truncate table abaccus';
     execute immediate 'Truncate table print_files';
     execute immediate 'Truncate table content_store';
  
  END clear_juror_data;

  PROCEDURE set_summoned_dates( p_pool_no varchar2, p_date date ) is

   -- Amend start date of pool
   -- Will only update if the pool only has jurors with status = 1 i.e. summoned
   
    l_count number;

   BEGIN
    
    select count(1) into l_count
    from pool
    where pool_no = p_pool_no
    and status <> 1
    and summons_file is null; -- don't count disqualified on selection
    
    IF l_count = 0 THEN
      BEGIN

  	  -- what about the year and month in pool_no?
 
      update unique_pool
      set return_date = trunc(p_date), next_date = trunc(p_date)
      where pool_no = p_pool_no;
      
      update pool
      set ret_date = trunc(p_date), next_date = decode(next_date,null,null,trunc(p_date))
      where pool_no = p_pool_no;
  
      commit;

      END;
   END IF;
   
   EXCEPTION
     when others then
     rollback;
	   raise;

   END set_summoned_dates;


  PROCEDURE refresh_voters(p_loc_code varchar2 )
  is

  -- Param in: p_loc_code - Either '000' for all locations otherwise valid court location.
  --
  -- Performs refresh of the votersnnn tables
  -- If parameter in is '000' then refresh is performed for ALL court locations
  -- otherwise it is just for the specified court location.

  l_zip varchar2(12);
  l_sql varchar2(600);

  cursor c_voters_table is
       select tname, Substr(tname, 7, 3) loc_code
       from tab
  	 where tname like decode(p_loc_code,'000','VOTERS%','VOTERS'||p_loc_code);
  BEGIN

   	 FOR ii in c_voters_table LOOP
       -- clear down the voters table
       l_sql := 'Truncate table VOTERS'||ii.loc_code;
       execute immediate l_sql;

  	 	 -- get post code from court_location
       select cl.loc_zip
        into l_zip
        from court_location cl
        where cl.loc_code = ii.loc_code;

        -- Ensure psotcode is in the catchment area list
        -- Assumes loc_zip contains a space
        insert into court_catchment_area
        (select substr(loc_zip,1,instr(loc_zip,' ')-1),loc_code from court_location
        where loc_code = ii.loc_code
        minus
        select postcode, loc_code from court_catchment_area);

       -- Insert 999 rows into votersnnn
       -- Sample data
       -- PART_NO	TITLE	LNAME	FNAME	DOB	FLAGS	ADDRESS	ADDRESS2	ADDRESS3	ADDRESS4	ADDRESS5	ADDRESS6	ZIP
       -- 712700001		LNAMEONE	FNAMEONE			1 STREET NAME		ANYTOWN				B4 7NA

        l_sql :=
        'Insert into VOTERS'||ii.loc_code||
        ' (PART_NO, REGISTER_LETT, POLL_NUMBER, NEW_MARKER, TITLE, LNAME, FNAME, DOB, FLAGS,'||
        ' ADDRESS, ADDRESS2, ADDRESS3, ADDRESS4, ADDRESS5, ADDRESS6, ZIP,'||
        ' DATE_SELECTED1, DATE_SELECTED2, DATE_SELECTED3, REC_NUM, PERM_DISQUAL, SOURCE_ID)'||
        '(select ''6''||'||ii.loc_code||'||LPad(rownum, 5,''0''),'||
        'rownum,'||
        'rownum,'||
        'null,'||
        'null,'||
        '''LNAME''||rownum,'||
        '''FNAME''||rownum,'||
        'null,'||
        'decode(Mod(rownum, 100),0,''X'',null),'||
        'rownum||'' STREET NAME'','||
        '''ANYTOWN'','||
        'null,'||
        'null,'||
        'null,'||
        'null,'||
        ''''||l_zip||''','||
        'null,'||
        'null,'||
        'null,'||
        'rownum,'||
        'null,'||
        'null'||
        ' from dual connect by level < 1000)';
        execute immediate l_sql;
        
        l_sql := 'Update VOTERS'||ii.loc_code||' set fname = replace(fname,''1'',''ONE''),'||' lname = replace(lname,''1'',''ONE'')';
        execute immediate l_sql;
        
        l_sql := 'Update VOTERS'||ii.loc_code||' set fname = replace(fname,''2'',''TWO''),'||' lname = replace(lname,''2'',''TWO'')';
        execute immediate l_sql;
        
        l_sql := 'Update VOTERS'||ii.loc_code||' set fname = replace(fname,''3'',''THREE''),'||' lname = replace(lname,''3'',''THREE'')';
        execute immediate l_sql;
        
        l_sql := 'Update VOTERS'||ii.loc_code||' set fname = replace(fname,''4'',''FOUR''),'||' lname = replace(lname,''4'',''FOUR'')';
        execute immediate l_sql;
        
        l_sql := 'Update VOTERS'||ii.loc_code||' set fname = replace(fname,''5'',''FIVE''),'||' lname = replace(lname,''5'',''FIVE'')';
        execute immediate l_sql;
        
        l_sql := 'Update VOTERS'||ii.loc_code||' set fname = replace(fname,''6'',''SIX''),'||' lname = replace(lname,''6'',''SIX'')';
        execute immediate l_sql;
        
        l_sql := 'Update VOTERS'||ii.loc_code||' set fname = replace(fname,''7'',''SEVEN''),'||' lname = replace(lname,''7'',''SEVEN'')';
        execute immediate l_sql;
        
        l_sql := 'Update VOTERS'||ii.loc_code||' set fname = replace(fname,''8'',''EIGHT''),'||' lname = replace(lname,''8'',''EIGHT'')';
        execute immediate l_sql;
        
        l_sql := 'Update VOTERS'||ii.loc_code||' set fname = replace(fname,''9'',''NINE''),'||' lname = replace(lname,''9'',''NINE'')';
        execute immediate l_sql;
        
        l_sql := 'Update VOTERS'||ii.loc_code||' set fname = replace(fname,''0'',''ZERO''),'||' lname = replace(lname,''0'',''ZERO'')';
        execute immediate l_sql;

     END LOOP;

     commit;
     
   EXCEPTION
     when others then
     rollback;
	   raise;

  END refresh_voters;

  END Reset;
