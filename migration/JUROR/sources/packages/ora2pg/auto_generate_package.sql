-- Generated by Ora2Pg, the Oracle database Schema converter, version 24.0
-- Copyright 2000-2023 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=172.17.0.4;sid=xe;port=1521

SET client_encoding TO 'UTF8';

\set ON_ERROR_STOP ON

CREATE OR REPLACE PACKAGE AUTO_GENERATE IS

  PROCEDURE confirmation_letter;
  PROCEDURE withdrawal_letter;

END AUTO_GENERATE;






CREATE OR REPLACE PACKAGE BODY AUTO_GENERATE AS

  lc_EnglishFormType    form_attr.form_type%type;
  lc_WelshFormType 	 	form_attr.form_type%type;
  lc_EnglishFile		print_files.printfile_name%type;
  lc_WelshFile			print_files.printfile_name%type;
  lc_Bureau_part_text	varchar2(300);
  lc_Bureau_Signature	varchar2(30);
  lc_LogFile			varchar2(30);
  lc_ErrorFile			varchar2(30);
  lc_OtherInformation	part_hist.other_information%type;
  lc_HistoryCode		part_hist.history_code%type;
  lc_FileExtension		varchar2(30);
  ln_english_processed_count	integer := 0;
  ln_welsh_processed_count   	integer := 0;
  ld_phoenix_delay        	integer;
  ld_end_time            	date;
  ld_begin_time				date := sysdate;

  lc_Job_Type				error_log.JOB%type;

  lc_date_part_text				varchar2(30) := case when to_char(sysdate,'dy') in ('sat','sun')
											 		 then rpad(to_char((sysdate+4),'DD FMMONTH YYYY'),18,' ')
													 else rpad(to_char((sysdate+2),'DD FMMONTH YYYY'),18,' ')
													 end;


  PROCEDURE populate_abaccus;
  PROCEDURE populate_part_hist;
  PROCEDURE	get_print_file_name;
  PROCEDURE	populate_print_files;
  PROCEDURE	write_error(p_info varchar2);

 PROCEDURE confirmation_letter is

 BEGIN

   lc_Job_Type	  := 'AUTO CONFIRMATION LETTER GENERATION';
   lc_EnglishFormType := '5224A';
   lc_WelshFormType	  := '5224AC';
   lc_OtherInformation:= 'Confirmation Letter Auto';
   lc_HistoryCode	  := 'RRES';



-- RFS 3681 following Insert statement now takes the attendance time from UNIQUE_POOL.ATTEND_TIME if present,
-- otherwise continues to use the default from COURT_LOCATION.LOC_ATTEND_TIME
-- UNIQUE_POOL.ATTEND_TIME is converted to a string using a 12 hour clock with the addition of the Meridian suffix AM or PM
--pool.police_check would be null of procdure PHOENIX has not run
--pool.police_check would be 'E' if a police check has been requested but has not yet been completed (PHOENIX has run but PHOENIXINTERFACE has not run
--Treat phoenix_date of Saturday as Monday (phoenix_date+2) and phoenix_date of Sunday as Monday (phoenix_date+1)

	 INSERT into temp_auto_generate_lett (part_no, pool_no, loc_code, row_id, lang, details)
	 SELECT p.part_no, p.pool_no, u.loc_code, c.ROWID,DECODE(upper(p.welsh),'Y','W',NULL,'E','E') ,
					   lc_date_part_text
					|| cc.loc_code
					|| decode(DECODE(upper(p.welsh),'Y','W',NULL,'E','E'),
					      'W', RPAD(upper(cc.loc_name),40),
						  'E', decode(cc.loc_code,'626',RPAD(upper(cc.loc_name),59), RPAD('The Crown Court at '||upper(cc.loc_name),59)))
					|| upper(lc_bureau_part_text)
					|| RPAD(Rtrim(to_char(p.next_date,'DAY')) || ' ' ||
					     to_char(p.next_date,'DD')		   || ' ' ||
			             Rtrim(to_char(p.next_date,'MONTH')) ||', ' ||
						 to_char(p.next_date,'YYYY'),32,' ')
					|| Rpad(decode(u.attend_time,
                            null,
                            nvl(decode(sign(instr(cc.loc_attend_time,'AM')),0,cc.loc_attend_time||' AM',cc.loc_attend_time),'9.00AM'),
                            to_char(u.attend_time,'hh:miAM')),
                         8,' ')
					|| RPAD(NVL(p.title,' '),10,' ') ||
			    	   RPAD(NVL(p.fname,' '),20,' ') ||
			    	   RPAD(NVL(p.lname,' '),20,' ') ||
			    	   RPAD(RPAD(NVL(p.address,' '),35) ||
			    	   RPAD(p.address2,35) ||
			    	   RPAD(p.address3,35) ||
			    	   RPAD(p.address4,35) ||
			    	   RPAD(p.address5,35) ||
			    	   RPAD(p.address6,35) ||
			    	   RPAD(p.zip,10),220) ||
			    	   RPAD(NVL(p.part_no,' '),9,' ')
					|| upper(lc_Bureau_Signature)
		      FROM  pool p, unique_pool u, confirm_lett c,  court_location cc
			  WHERE p.pool_no = u.pool_no
			  AND  	p.owner = '400'
			  AND	u.owner = '400'
			  AND	c.owner = '400'
			  AND	u.loc_code = cc.loc_code
			  AND	p.is_active = 'Y'
			  AND	p.responded = 'Y'
			  AND   p.status    =  2
			  AND   p.next_date >= p.phoenix_date
			  AND  	DECODE(to_char(p.phoenix_date,'D'), 6,trunc(p.phoenix_date)+2, 7,trunc(p.phoenix_date)+1, trunc(p.phoenix_date)) <= trunc(sysdate - DECODE(NVL(p.police_check,'E'),'E',ld_phoenix_delay,0))
			  AND 	p.phoenix_date is NOT NULL
			  AND 	p.part_no = c.part_no
			  AND	(c.printed <> 'Y' or c.printed is null);

   		  populate_abaccus;
		  populate_part_hist;
		  populate_print_files;

		  UPDATE /*+ BYPASS_UJVC */
			 (SELECT c.PRINTED c_printed,
					 c.DATE_PRINTED c_dt_printed
			  FROM	 confirm_lett c, temp_auto_generate_lett t
			  WHERE	 c.rowid = t.row_id
			  AND	 c.owner = '400')
		  SET c_printed = 'Y', c_dt_printed = ld_begin_time;

		  commit;

		  execute immediate 'truncate table temp_auto_generate_lett'; -- This bit is added so that print files are not created twice
		  		  					  								  -- if the package is run twice in same session

 EXCEPTION
   when others then
	 write_error(sqlerrm);
     rollback;
	 raise;


 END confirmation_letter;
/****************************************************************************************************************************/

 PROCEDURE withdrawal_letter is

 BEGIN

   lc_Job_Type	  := 'AUTO WITHDRAWAL LETTER GENERATION';
   lc_EnglishFormType := '5224';
   lc_WelshFormType	  := '5224C';
   lc_OtherInformation:= 'Withdrawal Letter Auto';
   lc_HistoryCode	  := 'RDIS';

 INSERT into temp_auto_generate_lett (part_no, pool_no, loc_code, row_id, lang, details)
 SELECT p.part_no, p.pool_no, p.loc_code, d.ROWID,DECODE(upper(p.welsh),'Y','W',NULL,'E','E') ,
				   lc_date_part_text
				|| decode(DECODE(upper(p.welsh),'Y','W',NULL,'E','E'),
				      'W', RPAD(upper(cc.loc_name),40),
					  'E', decode(cc.loc_code,'626',RPAD(upper(cc.loc_name),59), RPAD('The Crown Court at '||upper(cc.loc_name),59)))
				|| upper(lc_bureau_part_text)
				|| RPAD(NVL(p.title,' '),10,' ') ||
		    	   RPAD(NVL(p.fname,' '),20,' ') ||
		    	   RPAD(NVL(p.lname,' '),20,' ') ||
		    	   RPAD(RPAD(NVL(p.address,' '),35) ||
		    	   RPAD(p.address2,35) ||
		    	   RPAD(p.address3,35) ||
		    	   RPAD(p.address4,35) ||
		    	   RPAD(p.address5,35) ||
		    	   RPAD(p.address6,35) ||
		    	   RPAD(p.zip,10),220) ||
		    	   RPAD(NVL(p.part_no,' '),9,' ')
				|| upper(lc_Bureau_Signature)
	      FROM  pool p, disq_lett d,  court_location cc
		  WHERE p.owner = '400'
		  AND	d.owner = '400'
		  AND	d.disq_code = 'E'
		  AND	p.loc_code = cc.loc_code
		  AND	p.is_active = 'Y'
		  AND   p.status    =  6
		  AND 	p.part_no = d.part_no
		  AND	(d.printed <> 'Y' or d.printed is null);

		  populate_abaccus;
		  populate_part_hist;
		  populate_print_files;

  		  UPDATE /*+ BYPASS_UJVC */
	      (SELECT d.PRINTED d_printed,
		 		 d.DATE_PRINTED d_dt_printed
		   FROM	 disq_lett d, temp_auto_generate_lett t
		   WHERE d.rowid = t.row_id
		   AND	 d.owner = '400')
	   	  SET d_printed = 'Y', d_dt_printed = ld_begin_time;

 		delete from phoenix_temp where part_no in (
			   select part_no from temp_auto_generate_lett);

			   commit;

			   execute immediate 'truncate table temp_auto_generate_lett'; -- This bit is added so that print files are not created twice
					  					  								  -- if the package is run twice in same session


 EXCEPTION
   when others then
	 write_error(sqlerrm);
	  rollback;
	 raise;

 END withdrawal_letter ;


/****************************************************************************************************************************/

 PROCEDURE populate_abaccus IS

 BEGIN

  MERGE INTO abaccus a
  USING ( SELECT decode(lang,'E',lc_EnglishFormType,lc_WelshFormType) form_type, loc_code, trunc(ld_begin_time) creation_date, count(1) cnt
  		  FROM   temp_auto_generate_lett
  		  GROUP BY decode(lang,'E',lc_EnglishFormType,lc_WelshFormType), loc_code, ld_begin_time) q
  ON ( a.form_type = q.form_type and a.loc_code = q.loc_code and trunc(a.creation_date) = 	q.creation_date)
  WHEN matched THEN
    UPDATE SET a.number_of_items = a.number_of_items + q.cnt
  WHEN NOT matched THEN
  	INSERT (form_type,loc_code,creation_date,number_of_items)
	     values (q.form_type, q.loc_code, q.creation_date, q.cnt);


 END populate_abaccus;

/****************************************************************************************************************************/

 PROCEDURE populate_part_hist IS

 BEGIN

 	INSERT INTO  part_hist(owner, part_no,date_part,history_code,user_id,other_information,pool_no)
  	SELECT '400', part_no,sysdate,lc_HistoryCode,'SYSTEM',lc_OtherInformation,pool_no
  	FROM	 temp_auto_generate_lett;


 END populate_part_hist;

 PROCEDURE	get_print_file_name is

 BEGIN
  SELECT sum(number_of_items)
  INTO 	 ln_english_processed_count
  FROM 	 abaccus
  WHERE	 form_type = lc_EnglishFormType
  AND	 trunc(creation_date) = trunc(ld_begin_time);

  SELECT sum(number_of_items)
  INTO 	 ln_welsh_processed_count
  FROM 	 abaccus
  WHERE	 form_type = lc_WelshFormType
  AND	 trunc(creation_date) = trunc(ld_begin_time);


-- Get nextval from sequence data_file_no only if records exist for English letters

   IF ln_english_processed_count > 0 THEN
   	  SELECT 'JURY'||RPAD(data_file_no.nextval,4,'0')||lc_FileExtension
  	  INTO	 lc_EnglishFile
  	  FROM 	 dual;
   END IF;


-- Get nextval from sequence data_file_no only if records exist for Welsh letters

  IF ln_welsh_processed_count > 0 THEN
	  SELECT 'JURY'||RPAD(data_file_no.nextval,4,'0')||lc_FileExtension
	  INTO	 lc_WelshFile
	  FROM 	 dual;
  END IF;



 END get_print_file_name;

/****************************************************************************************************************************/

 PROCEDURE	populate_print_files IS

 BEGIN

   -- Get print file names
      get_print_file_name;

  -- Now populate print_files table

 	INSERT into print_files (printfile_name, creation_date, form_type, detail_rec)
	SELECT decode(lang,'E', lc_EnglishFile, lc_WelshFile),
		   ld_begin_time,
		   decode(lang,'E', lc_EnglishFormType, lc_WelshFormType),
		   details
	FROM   temp_auto_generate_lett;


 END populate_print_files;

/****************************************************************************************************************************/
 PROCEDURE write_error(p_info varchar2) IS
 pragma autonomous_transaction;

 BEGIN
     INSERT INTO ERROR_LOG (job, error_info) values (lc_Job_Type, p_info);
	 commit;
 END write_error;

/****************************************************************************************************************************/

BEGIN

  	/* Selecting the data from COURT_LOCATION, SYSTEM_FILE table of the Central Bureau during Package loading*/

		 SELECT		RPAD(NVL(loc_name,' '),40) ||
				    RPAD(RPAD(NVL(loc_address1,' '),35) ||
				 		 RPAD(loc_address2,35) ||
				         RPAD(loc_address3,35) ||
				         RPAD(loc_address4,35) ||
				         RPAD(loc_address5,35) ||
				         RPAD(loc_address6,35) ||
				         RPAD(loc_zip,10),220) ||
				    RPAD(NVL(loc_phone,' '),12,' ') ||
				    RPAD(NVL(tdd_phone,' '),12,' '),
					RPAD(NVL(loc_signature,' '),30),
					LPAD(print_transmission,2,'0') || '.' || LPAD(print_transmission,4,'0'),
					phoenix_delay
		 INTO		lc_bureau_part_text, lc_Bureau_Signature, lc_FileExtension, ld_phoenix_delay
		 FROM 		court_location c, system_file s
		 WHERE		loc_code = '400'
		 AND		s.owner	 = '400';



END AUTO_GENERATE;



