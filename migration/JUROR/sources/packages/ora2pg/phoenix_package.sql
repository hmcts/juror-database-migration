-- Generated by Ora2Pg, the Oracle database Schema converter, version 24.0
-- Copyright 2000-2023 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=172.17.0.4;sid=xe;port=1521

SET client_encoding TO 'UTF8';

\set ON_ERROR_STOP ON

CREATE OR REPLACE PACKAGE phoenix AS

	PROCEDURE police_check;
	PROCEDURE no_police_check;

END phoenix;






CREATE OR REPLACE PACKAGE BODY phoenix AS

PROCEDURE	    write_error(p_info varchar2);

lc_Job_Type	    error_log.JOB%type;

PROCEDURE police_check IS

  cursor police_check is
  select part_no,
         pool_no,
         phoenix_date,
         phoenix_checked,
         lname,
         fname,
         zip,
	 dob,
	 loc_code,
	 police_check
  from   pool
  where  dob is not null
  and    (read_only is null or read_only = 'N')
  and    zip is not null
  and    status = 2
  and    nvl(police_check, '^') != 'E'
  and    phoenix_date is not null
  and    phoenix_checked is null
  and    is_active = 'Y'
  and    owner = '400';

  l_check_on        varchar2(1);
  l_lett_printed    varchar2(1);

BEGIN

lc_Job_Type := 'PHOENIX.POLICE_CHECK';
  for each_participant in police_check loop
	BEGIN
       	   select printed
       	   into   l_lett_printed
       	   from   confirm_lett
       	   where  confirm_lett.part_no = each_participant.part_no;
	EXCEPTION
           when no_data_found then
           l_lett_printed := null;
      	END;

	if (l_lett_printed is null) then
      	BEGIN
	   update pool
	   set phoenix_date = trunc(sysdate),
	   police_check = 'E'
	   where pool_no  = each_participant.pool_no
	   and   part_no = each_participant.part_no
	   and   is_active = 'Y'
	   and   owner = '400';


       	   -- RFS 3681 Changed value for Other_information column
           insert into part_hist (owner,
				part_no,
                       		date_part,
                    		history_code,
                       		user_id,
                       		other_information,
                       		pool_no)
           values ('400',
				each_participant.part_no,
                       		sysdate,
                       		'POLE',
                       		'SYSTEM',
                       		'Check requested',
                       		each_participant.pool_no);

           insert into phoenix_temp (part_no,
                               	last_name,
                               	first_name,
                               	postcode,
                               	date_of_birth,
                               	result,
                               	checked)
           values (each_participant.part_no,
                               	each_participant.lname,
                               	each_participant.fname,
                               	each_participant.zip,
                               	each_participant.dob,
                               	null,
                               	null);
           END;
	end if;

  end loop;

EXCEPTION
   when others then
	write_error(sqlerrm);
     	rollback;
	raise;

END police_check;

/************************************************************************
 *									*
 *	Procedure:	phoenix.no_police_check    			*
 *									*
 *	Access:		public						*
 *									*
 *	Arguments:	none						*
 *									*
 *	Returns:	none						*
 *									*
 *	Description:	This program will extract all POOL records      *
 *			that are ready for a police check but are       *
 *			missing either the dob or zip and will		*
 *			update PART_HIST to record this.		*
 *									*
 *	Name		Date		Action				*
 *	====		====		======				*
 *	C Davies	280601		Created				*
 *									*
 ************************************************************************/


PROCEDURE no_police_check AS

  cursor no_police_check is
  select part_no,
         pool_no,
         phoenix_date,
         phoenix_checked,
         lname,
         fname,
         zip,
	 dob,
	 loc_code,
	 police_check
  from   pool
  where  (dob is null
  or     zip is null)
  and    status = 2
  and    police_check is null
  and    phoenix_date is not null
  and    phoenix_checked is null
  and    is_active = 'Y'
  and    owner = '400';

  l_check_on        varchar2(1);

BEGIN

  lc_Job_Type := 'PHOENIX.NO_POLICE_CHECK';
  for each_participant in no_police_check loop
	update pool
	set   police_check = 'I'
	where pool_no  = each_participant.pool_no
	and   part_no = each_participant.part_no
	and   is_active = 'Y'
        and   owner = '400';

	insert into part_hist (owner,
			part_no,
        		date_part,
			history_code,
			user_id,
			other_information,
			pool_no)
	values ('400',
			each_participant.part_no,
			sysdate,
			'POLI',
			'SYSTEM',
			'Insufficient Information',
			each_participant.pool_no);
  end loop;

EXCEPTION
   when others then
	 write_error(sqlerrm);
     rollback;
	 raise;

END no_police_check;

PROCEDURE write_error(p_info varchar2) IS
pragma autonomous_transaction;

BEGIN
    INSERT INTO ERROR_LOG (job, error_info) values (lc_Job_Type, p_info);
	 commit;
END write_error;

END phoenix;



