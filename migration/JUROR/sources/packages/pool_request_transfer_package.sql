-- Generated by Ora2Pg, the Oracle database Schema converter, version 24.0
-- Copyright 2000-2023 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=172.17.0.5;sid=xe;port=1521

SET client_encoding TO 'UTF8';

SET search_path = "JUROR",public;
\set ON_ERROR_STOP ON

CREATE OR REPLACE PACKAGE       pool_request_transfer  IS

   PROCEDURE  transfer_pool_request;
   PROCEDURE  transfer_unique_pool(location_code varchar2);

END pool_request_transfer;




CREATE OR REPLACE PACKAGE BODY       pool_request_transfer AS
--declare private procedure
PROCEDURE write_error_message(p_job varchar2, p_Message varchar2);

 g_job_status  boolean := true;


/***********************************************************************************************************
 *
 *
 *	Procedure:	pool_request_transfer.transfer_pool_request
 *
 *
 *	Access:		public
 *
 *
 *	Arguments:	none
 *
 *
 *	Returns:	none
 *
 *
 *	Description:	When run at the SUPS Database, this program will
 *			transfer pool request data from the SUPS Court to SUPS Bureau and
 *			insert or update the data accordingly
 *
 *
 *	Version    Name		Date		Action
 *	=======    ====		====		======
 *	           Joy          21/09/05	Created
 *                 Kal          11/12/06        SCR 4352 - Graph/Negative (NIL) pool requests
 *                 Chris W      04/04/13        RFS 3681
 ***************************************************************************************************/



Procedure transfer_pool_request is

     --declare the variable used in the procedure

  Cursor C1_sups_courts  is select distinct(owner) owner from unique_pool where owner <>'400';
   Begin

        For  location_codes in  C1_sups_courts
        Loop

          Begin
                 Transfer_unique_pool(location_codes.owner);
           	     commit; -- commit the transaction for each court.
          EXCEPTION
		      WHEN OTHERS THEN
			  write_error_message('POOL REQUEST TRANSFER', 'LOC_CODE :'||location_codes.owner||' : '||SQLERRM);
			  rollback;
			  g_job_status := false;
          End;
        End loop;

			IF NOT g_job_status THEN
			  raise_application_error(-20001, 'Error in Pool Request Procedure. Not all pools are transferred. Check ERROR_LOG table for failed Locations');
			END IF;

    EXCEPTION
		    WHEN OTHERS THEN
			  write_error_message('POOL REQUEST TRANSFER', SQLERRM);
			  rollback;
			  raise;
    End  transfer_pool_request;

/**********************************************************************************************
 *
 *
 *	Procedure:	pool_request_transfer.transfer_unique_pool
 *
 *
 *	Access:		Public
 *
 *
 *	Arguments:	Location code
 *
 *
 *	Returns:	none
 *
 *
 *	Description: This program will
 *			transfer pool request data from the SUPS Court to SUPS Bureau and
 *			insert or update the data accordingly
 *
 *
 *	Version    Name		   Date		    Action
 *	=======    ====		   ====		    ======
 *	           Joy         21/09/05	    Created
 *             Kal         11/12/06     SCR 4352 - Graph/Negative (NIL) pool requests
 *             Chris W     04/04/13     RFS 3681
 *             Craig C     06/10/22     JM-1937 - Invoke directly from Juror Digital backend API
 **************************************************************************************************/
PROCEDURE transfer_unique_pool (location_code varchar2) IS
   ln_rows_inserted NUMBER := 0;

    -- RFS 3681 Include attend_time
    CURSOR c_unique_pool(location_code varchar2) IS
             SELECT  owner,
                     pool_no,
		     jurisdiction_code,
		     return_date,
		     next_date,
		     no_requested,
		     pool_total,
		     reg_spc,
		     pool_type,
		     loc_code,
		     new_request,
		     read_only,
                     attend_time
	      	FROM	 unique_pool
		    WHERE New_request ='Y' AND
                owner = location_code;

  l_cnt number;

  BEGIN

    FOR pr IN c_unique_pool(location_code)
    loop

	SELECT count(1) INTO l_cnt FROM unique_pool
	WHERE owner = '400' AND pool_no =  pr.pool_no;


	IF l_cnt = 0 THEN

          -- RFS 3681 Included attend_time
          INSERT INTO unique_pool
		(owner,
		pool_no
		,jurisdiction_code
		,return_date
		,next_date
		,no_requested
		,pool_total
		,reg_spc
		,pool_type
		,loc_code
		,new_request
		,read_only
                ,attend_time
		  )
	      VALUES('400',
		   pr.pool_no,
		   pr.jurisdiction_code,
		   pr.return_date,
		   pr.next_date,
		   Decode(Sign(pr.no_requested), -1, 0, pr.no_requested),
		   pr.pool_total,
		   pr.reg_spc,
		   pr.pool_type,
		   pr.loc_code,
		   DECODE(pr.new_request,'Y','T','N'),
		   DECODE(pr.new_request,'N','Y','N'),
                   pr.attend_time);
      END IF;

		 ln_rows_inserted := ln_rows_inserted + SQL%ROWCOUNT;
		IF (pr.new_request = 'Y' ) THEN
		 	UPDATE unique_pool
			SET	   new_request = 'T',
				   read_only   = 'Y'
			WHERE  pool_no = pr.pool_no
                         AND owner = location_code;

		END IF;

      END loop;
  END transfer_unique_pool;


  /*******************************************************************************************************************/


  PROCEDURE write_error_message(p_job varchar2, p_Message varchar2) is
   pragma autonomous_transaction;
  BEGIN
   INSERT INTO ERROR_LOG (job, error_info) values (p_job, p_Message );
	COMMIT;
  END write_error_message;

END pool_request_transfer;

