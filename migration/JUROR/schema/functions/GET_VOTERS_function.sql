-- Generated by Ora2Pg, the Oracle database Schema converter, version 24.0
-- Copyright 2000-2023 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=172.17.0.5;sid=xe;port=1521

SET client_encoding TO 'UTF8';
SET search_path = JUROR,public;

DROP TYPE IF EXISTS t_flags;
DROP TYPE IF EXISTS t_rowid;

CREATE TYPE t_flags as 
(
	flag varchar(2)
);

CREATE TYPE t_rowid as 
(
	rowid varchar(30)
);

CREATE OR REPLACE FUNCTION JUROR.get_voters ( p_required bigint, -- Required number of jurors
 p_minDate timestamp(0),   -- Not less than 18yrs old
 p_maxDate timestamp(0) ,  -- Not over 70 yrs old
 p_LocCode text, p_areacode_list text,   -- comma separated list used with SQL IN clause below
 p_areacode_all_yn text, -- 'Y' for all area codes
 p_pool_type text ) RETURNS VOTERSROWIDTABLE AS $body$
      -- 'C'ORONER OR 'N'ON CORONER POOLS (REGULAR POOL)
DECLARE

      l_data             VOTERSROWIDTABLE := VotersRowidTable();
      l_cnt              bigint := 0;
	  l_cursor 			 REFCURSOR;

	  --t_flags text is table of varchar(2) index by integer;
	  tab_flags t_flags[];

	  --type t_rowid is table of varchar(30) index by integer;
	  tab_rowid t_rowid[];

	  l_julian_min_dt bigint := (to_char(p_minDate,'J'))::numeric; -- Since the input date format cannot be guaranteed  across varios systems,
  	  l_julian_max_dt bigint := (to_char(p_maxDate,'J'))::numeric; -- I am changing it to Julian Format.
	  l_found boolean := false;


BEGIN

	-- Open dynamic cursor against the required table
  -- RFC1731 non coroner pool rules...other rules apply for coroner pools....
	   open l_cursor for EXECUTE ' select rowidtochar(rowid) row_id, flags '||
	   				 ' from voters'||p_LocCode||
						 ' where date_selected1 is null '||
						 ' and ((DOB is null) OR '||
						 ' (( to_number(to_char(DOB,''J'')) > '||l_julian_min_dt||' ) AND '||
						 '  ( to_number(to_char(DOB,''J'')) < '||l_julian_max_dt||' )))'||
						 ' and PERM_DISQUAL is null '||
             ' and ( Decode(substr(zip,1, instr(zip, '' '') -1 ), NULL, '' '', Trim(substr(zip,1, instr(zip, '' '') -1 ))) IN ('||p_areacode_list||')' || -- v1.1 >> RFC 1731 specified postcode areas V1.2 <<
             ' or '''||p_areacode_all_yn||'''  = ''Y'' )' ||                             -- or if ALL areas specified
             ' and ( FLAGS is null OR '''||p_pool_type||'''  = ''N'' )' ||               -- only coronor pools check flag v1.1 <<
						 ' order by dbms_random.value';

	   loop
	   	for i in 1..p_required*1.2
		loop
			fetch next from l_cursor into tab_rowid, tab_flags;

			-- I am using BULK COLLECT  and  LIMIT clauses, so that if the required participants fall short due to
			-- disqualified on selection categories, then there is no need to revisit the table once again
			for i in 1..ARRAY_LENGTH(tab_rowid.count,1)
				loop
								IF  tab_flags(i) IS NULL THEN

									l_cnt := l_cnt + 1; -- Count only people with null values in Flagscolumn
									l_found := l_cnt > (p_required)::numeric;
								END IF;

				exit when l_found; -- exit the inner loop when required number is found
					l_data[l_data.count] := VotersRowidType(tab_rowid(i) );

				end loop;
			EXIT WHEN NOT FOUND; /* apply on l_found or l_cursor */
		end loop;
		EXIT;
       end loop;
	   
	close l_cursor;
	  IF l_cnt = 0 then
		  raise exception using
		  	errcode='45001'; -- raise this exception when list is empty
	  END IF;

      IF l_cnt < p_required then
      raise exception using
		  	errcode='45002'; -- Raise this exception when number of participants found is less than required
	  END IF;

      return l_data; -- return rowid list
  exception
  	  when sqlstate '45001' then
	     RAISE EXCEPTION '%', 'Voters list is low' USING ERRCODE = '45001';
	  when sqlstate '45002' then
	     RAISE EXCEPTION '%', 'Voters list is empty' USING ERRCODE = '45002';
  end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
 STABLE;
-- REVOKE ALL ON FUNCTION JUROR.get_voters ( p_required bigint, p_minDate timestamp(0), p_maxDate timestamp(0) , p_LocCode text, p_areacode_list text, p_areacode_all_yn text, p_pool_type text ) FROM PUBLIC;

