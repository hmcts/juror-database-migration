-- Generated by Ora2Pg, the Oracle database Schema converter, version 24.0
-- Copyright 2000-2023 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=172.17.0.5;sid=xe;port=1521

SET client_encoding TO 'UTF8';
SET CLIENT_MIN_MESSAGES = 'notice';
SET search_path = JUROR,public;
\set ON_ERROR_STOP ON





CREATE OR REPLACE FUNCTION JUROR.set_up_voters ( p_court_no text, p_zip text, p_num_reqd integer) RETURNS integer AS $body$
DECLARE

  ora2pg_rowcount int;

-- Alter as appropriate.
	lb_commit  boolean := true;

  -- Internal variables.
  ls_voter_start_no varchar(9);
  ls_part_no varchar(9);
  ls_voter_no varchar(4);
  ls_fname  varchar(30);
  ls_lname  varchar(30);
  ls_address  varchar(30);
  ls_address2  varchar(30);
  ls_zip varchar(9);
  li_zip_sector integer := 0;
  li_rec_count integer;
  li_recs_added integer := 0;
  ls_execute varchar(300);
  ls_curr_max_part_no varchar(9);
  li_curr_max_part_no integer;

BEGIN

  ls_address2 := 'TOWN' || p_court_no;

  ls_execute := 'select count(*) from voters' || p_court_no;
  EXECUTE ls_execute into STRICT li_rec_count;
  
  if li_rec_count > 0 then
    -- Get highest current participant number.
    ls_execute := 'select max(part_no) from voters' || p_court_no;
    EXECUTE ls_execute into STRICT ls_curr_max_part_no;

    -- Remove the first 4 chars
    ls_curr_max_part_no := substr(ls_curr_max_part_no, 5, 10);
    li_curr_max_part_no := (ls_curr_max_part_no)::numeric;
    li_curr_max_part_no := li_curr_max_part_no + 1;
    ls_voter_no:= li_curr_max_part_no;
    ls_curr_max_part_no := li_curr_max_part_no::varchar;
    ls_voter_start_no := '8' || p_court_no || LPAD(ls_curr_max_part_no, 5, '0');

  else
    ls_voter_start_no := '8' || p_court_no || '00001';
    ls_voter_no := 1;
  end if;
  ls_part_no := ls_voter_start_no;

  for counter in 1..p_num_reqd loop
    li_zip_sector := li_zip_sector + 1;
    if li_zip_sector > 8 then
      li_zip_sector := 1;
    end if;
    ls_lname := 'LNAME' || ls_voter_no;
    ls_fname := 'FNAME' || ls_voter_no;
    ls_address := ls_voter_no || ' STREET NAME';
    ls_zip := p_zip || li_zip_sector || ' 1NN';

    --dbms_output.put_line('Inserting part no: ' || ls_part_no || ' voter no ' || ls_voter_no);
    
    ls_execute := 'insert into voters' || p_court_no || ' ' ||
                         ' (part_no, register_lett, poll_number, lname, fname, address, address2, zip, rec_num)' || 
                         ' values ' ||
                         ' (:ls_part_no, :ls_voter_no, :ls_voter_no, :ls_lname, :ls_fname, :ls_address, :ls_address2, :ls_zip, :ls_voter_no)';

    EXECUTE(ls_execute) using ls_part_no, ls_voter_no, ls_voter_no, ls_lname, ls_fname, ls_address, ls_address2, ls_zip, ls_voter_no;
    GET DIAGNOSTICS ora2pg_rowcount = ROW_COUNT;

    --dbms_output.put_line('inserted' || SQL%rowcount);
    li_recs_added := li_recs_added+  ora2pg_rowcount;

    ls_part_no := ls_part_no + 1;
    ls_voter_no := ls_voter_no + 1;

    if ls_voter_no > 99999 then
      RAISE NOTICE 'Terminated: Voter No: %', ls_voter_no;
      exit;
    end if;

  end loop;

  ls_execute := 'select count(*) from voters' || p_court_no;

  EXECUTE ls_execute into STRICT li_rec_count;

  RAISE NOTICE 'Recs added: %', li_recs_added;
  RAISE NOTICE 'Total Recs: %', li_rec_count;

  if lb_commit then
    commit;
    RAISE NOTICE 'COMMIT';
  else
    rollback;
    RAISE NOTICE 'ROLLBACK';
  end if;

  return 0;

  Exception
	when others then
		RAISE NOTICE 'Insert error:%', SUBSTR(SQLERRM, 1, 100);
		rollback;
		raise;

end;
$body$
LANGUAGE PLPGSQL
 STABLE;
-- REVOKE ALL ON FUNCTION JUROR.set_up_voters ( p_court_no text, p_zip text, p_num_reqd integer) FROM PUBLIC;

