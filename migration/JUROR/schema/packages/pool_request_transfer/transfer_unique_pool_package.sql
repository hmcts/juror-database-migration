-- Generated by Ora2Pg, the Oracle database Schema converter, version 24.0
-- Copyright 2000-2023 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=172.17.0.5;sid=xe;port=1521

SET client_encoding TO 'UTF8';
SET search_path = JUROR,public;


/**********************************************************************************************
 *
 *
 *	Procedure:	pool_request_transfer_transfer_unique_pool()
 *
 *
 *	Access:		Public
 *
 *
 *	Arguments:	Location code
 *
 *
 *	Returns:	none
 *
 *
 *	Description: This program will
 *			transfer pool request data from the SUPS Court to SUPS Bureau and
 *			insert or update the data accordingly
 *
 *
 *	Version    Name		   Date		    Action
 *	=======    ====		   ====		    ======
 *	           Joy         21/09/05	    Created
 *             Kal         11/12/06     SCR 4352 - Graph/Negative (NIL) pool requests
 *             Chris W     04/04/13     RFS 3681
 *             Craig C     06/10/22     JM-1937 - Invoke directly from Juror Digital backend API
 **************************************************************************************************/
CREATE OR REPLACE PROCEDURE pool_request_transfer_transfer_unique_pool (location_code text) AS $body$
DECLARE

   ora2pg_rowcount int;
ln_rows_inserted bigint := 0;

    -- RFS 3681 Include attend_time
    c_unique_pool CURSOR(location_code text) FOR
             SELECT  owner,
                     pool_no,
		     jurisdiction_code,
		     return_date,
		     next_date,
		     no_requested,
		     pool_total,
		     reg_spc,
		     pool_type,
		     loc_code,
		     new_request,
		     read_only,
                     attend_time
	      	FROM	 juror.unique_pool
		    WHERE New_request ='Y' AND
                owner = location_code;

  l_cnt bigint;


BEGIN

    FOR pr IN c_unique_pool(location_code)
    loop

	SELECT count(1) INTO STRICT l_cnt FROM juror.unique_pool
	WHERE owner = '400' AND pool_no =  pr.pool_no;


	IF l_cnt = 0 THEN

          -- RFS 3681 Included attend_time
          INSERT INTO juror.unique_pool(owner,
		pool_no
		,jurisdiction_code
		,return_date
		,next_date
		,no_requested
		,pool_total
		,reg_spc
		,pool_type
		,loc_code
		,new_request
		,read_only
                ,attend_time
		  )
	      VALUES ('400',
		   pr.pool_no,
		   pr.jurisdiction_code,
		   pr.return_date,
		   pr.next_date,
		   CASE WHEN Sign(pr.no_requested)=-1 THEN  0  ELSE pr.no_requested END ,
		   pr.pool_total,
		   pr.reg_spc,
		   pr.pool_type,
		   pr.loc_code,
		   CASE WHEN pr.new_request='Y' THEN 'T'  ELSE 'N' END ,
		   CASE WHEN pr.new_request='N' THEN 'Y'  ELSE 'N' END ,
                   pr.attend_time);
      END IF;

		 GET DIAGNOSTICS ora2pg_rowcount = ROW_COUNT;


		 ln_rows_inserted := ln_rows_inserted +  ora2pg_rowcount;
		IF (pr.new_request = 'Y' ) THEN
		 	UPDATE juror.unique_pool
			SET	   new_request = 'T',
				   read_only   = 'Y'
			WHERE  pool_no = pr.pool_no
                         AND owner = location_code;

		END IF;

      END loop;
  END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pool_request_transfer_transfer_unique_pool (location_code text) FROM PUBLIC;
