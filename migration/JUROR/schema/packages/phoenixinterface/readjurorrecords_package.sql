-- Generated by Ora2Pg, the Oracle database Schema converter, version 24.0
-- Copyright 2000-2023 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=172.17.0.5;sid=xe;port=1521

SET client_encoding TO 'UTF8';
SET search_path = JUROR,public;


/************************************************************
 *
 ************************************************************
 * Description
 * ===========
 *
 ************************************************************/
/************************************************************
 * phoenixinterface_readJurorRecords()
 ************************************************************
 * Description
 * ===========
 * This procedure is called to read all the jurors from the
 * JMS database that are ready for PNC checking and store
 * them in the Phoenix Interface database Juror table. It
 * only reads those jurors that are not already in the Juror
 * table. The jurors that are in the Juror table are those
 * that a check could not be performed for on the previous run,
 * normally due to an error.
 *
 *  History
 *
 *	Version Name		  Date		 Desc
 *	======= ========= ======== ====
 *  V1.0    ???       ???      Initial version
 *	V1.2    Kal Sohal 20/11/06 SCR 4341 PNC Errors.
 *	V1.3    Kal Sohal 05/01/07 SCR 4341 - Fixed phoenixinterface_jurorMiddleName() system test bug.
 *	V1.4    Kal Sohal 08/01/07 SCR 4341 - phoenixinterface_jurorMiddleName() now returns NULL where middlename does not exist.
*/
CREATE OR REPLACE PROCEDURE phoenixinterface_readJurorRecords () AS $body$
DECLARE


      first_name           varchar(20);
      sur_name             varchar(20);
      space_pos            bigint;
      middle_name          varchar(20);

      c_read_juror CURSOR FOR SELECT part_no, first_name,
         last_name, postcode, date_of_birth FROM phoenix_temp
         WHERE result is null and
               part_no not in ( SELECT id from juror );


BEGIN
      -- The various parts of this procedure are contained
      -- in seperate blocks to enable an error with one
      -- record to not stop the processing of others.
      PERFORM set_config('phoenixinterface_lc_job_type', 'phoenixinterface_READJURORRECORDS()', false);

      FOR juror_rec IN c_read_juror LOOP
         BEGIN
            IF ( ( juror_rec.first_name  IS NULL ) OR ( juror_rec.last_name  IS NULL ) ) THEN
		 CALL phoenixinterface_write_error('Juror ' || juror_rec.part_no || 'contains null data');
            ELSE
		BEGIN
			first_name := phoenixinterface_jurorFirstName( replace(replace(regexp_replace(juror_rec.first_name,'[ ]+',' ', 'g'),' -','-'),'- ','-') );

                  	middle_name := phoenixinterface_jurorMiddleName( replace(replace(regexp_replace(juror_rec.first_name,'[ ]+',' ', 'g'),' -','-'),'- ','-') );

                  	sur_name := phoenixinterface_jurorSurname( replace(replace(regexp_replace(juror_rec.last_name,'[ ]+',' ', 'g'),' -','-'),'- ','-') );

			INSERT INTO juror( id, first_name, last_name, surname, postcode,
                                      dob, check_complete, disqualified,
                                      try_count )
                     	VALUES ( juror_rec.part_no,
                              first_name,
                              middle_name,
                              sur_name,
                              UPPER(replace(juror_rec.postcode, ' ' , '')),
                              juror_rec.date_of_birth,
                              'N', 'N', 0 );

               		COMMIT;
            	EXCEPTION
               		WHEN OTHERS THEN
                	CALL phoenixinterface_write_error( 'Error on writing '|| juror_rec.part_no || ' to juror table for checking ');
			ROLLBACK;
			RAISE;
            	END;
	    END IF;
         END;

      END LOOP;

EXCEPTION
      WHEN OTHERS THEN
         CALL phoenixinterface_write_error( 'Error on opening cursor on JMS juror table ');
	 ROLLBACK;
	 RAISE;

END;

$body$
LANGUAGE PLPGSQL
;
-- REVOKE ALL ON PROCEDURE phoenixinterface_readJurorRecords () FROM PUBLIC;
