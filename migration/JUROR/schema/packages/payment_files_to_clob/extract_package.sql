-- Generated by Ora2Pg, the Oracle database Schema converter, version 24.0
-- Copyright 2000-2023 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=172.17.0.5;sid=xe;port=1521

SET client_encoding TO 'UTF8';
SET search_path = JUROR,public;

DROP TYPE IF EXISTS t_creation_date;
DROP TYPE IF EXISTS t_header;
DROP TYPE IF EXISTS t_file_name;

CREATE TYPE t_creation_date as (
	creation_date timestamp 
);

CREATE TYPE t_header as(
	header varchar(100) 
);

CREATE TYPE t_file_name as(
	file_name varchar(100) 
);


CREATE OR REPLACE PROCEDURE payment_files_to_clob_extract () AS $body$
DECLARE
	ora2pg_rowcount int;
	tab_creation_date  	t_creation_date[];
	tab_header			t_header[];
	tab_file_name  		t_file_name[];
BEGIN

-- Check to remove duplicate payment to jurors
-- Update conf_file_ref to prevent payment from being included in the next payment file
Update ARAMIS_PAYMENTS a1
set con_file_ref = to_char(date_trunc('day', clock_timestamp()),'DDMONYYYY')||'DuplicateRemoved'
where
-- Restrict to payments yet to be extracted.
-- This also avoids updating a payment that has already had it's corresponding duplicate flagged
CASE WHEN con_file_ref IS NULL THEN 'N'  ELSE null END  ='N'
-- Restrict to duplicates identified by audit_report vs part_hist
and date_trunc('day', a1.creation_date)||substr(a1.part_invoice,1,9)||ltrim(to_char(a1.expense_total,'99999.00'))
in (SELECT creation_date||part_no||total from (
select p.owner, p.part_no, substr(other_information,10,9) audit_no, substr(p.pool_no,2,length(p.pool_no)-1) total,
sum(a.total_amount),max(date_trunc('day', date_part)) creation_date
from audit_report a, part_hist p
where
a.date_aramis_created >= (select min(date_trunc('day', creation_date)) from ARAMIS_PAYMENTS where CASE WHEN con_file_ref IS NULL THEN 'N'  ELSE null END  = 'N')
and a.app_stage = 10
and a.owner=p.owner
and a.part_no=p.part_no
and a.audits=substr(p.other_information,10,9)
and p.history_code='AEDF'
and p.pool_no <>'#0'
and p.owner <> '400'
group by p.owner, p.part_no, substr(other_information,10,9),p.pool_no
having coalesce(sum(a.total_amount),0) = 0) alias20)
-- select rows to update from aramis_payments i.e. exclude the first row of each set of duplicate rows
and unique_id <> (select min(a2.unique_id) from aramis_payments a2
where a2.owner=a1.owner and substr(part_invoice,1,9)=substr(a1.part_invoice,1,9)
and CASE WHEN a2.con_file_ref IS NULL THEN 'N'  ELSE null END  = 'N');

SELECT creation_date, to_char(creation_date,'FMDDMONTHYYYY') || lpad(nextval('aramis_count'),9,0) || '.dat', 'HEADER' || '|' || lpad(currval('aramis_count'),9,0) || '|' || lpad(to_char(total,'9999990.90'),11)
INTO STRICT   tab_creation_date, tab_file_name, tab_header
FROM ( SELECT date_trunc('day', CREATION_DATE) creation_date, sum(expense_total) total
  		FROM ARAMIS_PAYMENTS
		WHERE  date_trunc('day', creation_date) <= date_trunc('day', current_setting('payment_files_to_clob_ext_date')::timestamp(0))
		 AND CASE WHEN con_file_ref  IS NULL THEN 'N'  ELSE NULL END  = 'N'
		GROUP BY date_trunc('day', creation_date)) alias14;

GET DIAGNOSTICS ora2pg_rowcount = ROW_COUNT;
IF ora2pg_rowcount > 0 THEN
	FOR x in tab_creation_date.first..tab_creation_date.last loop
		begin
			PERFORM write_to_clob(tab_creation_date(x), tab_header(x), tab_file_name(x));
			UPDATE aramis_payments
    			SET con_file_ref = tab_file_name(x)
    			WHERE date_trunc('day', CREATION_DATE) = tab_creation_date(x);
		end;
	END LOOP;
 END IF;

commit;

EXCEPTION
	WHEN OTHERS THEN
	    rollback;
		raise;

END;

$body$
LANGUAGE PLPGSQL
;
-- REVOKE ALL ON PROCEDURE payment_files_to_clob_extract () FROM PUBLIC;
