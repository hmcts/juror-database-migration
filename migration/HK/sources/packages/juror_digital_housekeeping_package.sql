-- Generated by Ora2Pg, the Oracle database Schema converter, version 24.0
-- Copyright 2000-2023 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=172.17.0.2;sid=xe;port=1521

SET client_encoding TO 'UTF8';

SET search_path = hk,public;
\set ON_ERROR_STOP ON

CREATE OR REPLACE package    JUROR_DIGITAL_HOUSEKEEPING is

  -- Author  : S. CHOHAN
  -- Created : 02/08/2019
  -- Purpose : Delete old juror digital records for records older than a given threshold.

  PROCEDURE perform_deletions(p_retention_threshold number);

end JUROR_DIGITAL_HOUSEKEEPING;


CREATE OR REPLACE package body    JUROR_DIGITAL_HOUSEKEEPING AS
/*************************************************************************************************
*
*	Package:	    juror_digital_housekeeping
*
*	Arguments:	    retention_threshold number(3) How long to retain before deletion is performed in
*                   years. From 0..999.
*
*	Returns:	    none
*
*	Description:    Performs deletions of juror digital records of jurors older than the given
*                   'retention_threshold' period.
*
*	Name		Date		Comment
*	====		====		=======
*	Shrenit     02/08/19	Initial.
**************************************************************************************************/

    PROCEDURE write_audit(p_juror_no varchar2, p_completed_date date,  p_table_deletions varchar2);

    lc_table_deletions varchar2(1000);
    li_responses_count number(5);
    li_deleted_count number(5);
    lb_failed BOOLEAN := FALSE;
    delete_failed CONSTANT VARCHAR2(17) := 'failed delete: ';


-- =================================================================================================
-- =================================================================================================

PROCEDURE delete_juror_responses_aud(juror_no varchar2, completed_date date) IS

BEGIN

    DELETE FROM JUROR_DIGITAL.juror_response_aud
    WHERE juror_number = juror_no;

    lc_table_deletions := lc_table_deletions||' TABLE juror_response_aud :'||TO_CHAR(SQL%ROWCOUNT)||', ';

EXCEPTION
when others then
  BEGIN
    lc_table_deletions := lc_table_deletions||' TABLE juror_response_aud failed :'||TO_CHAR(SQLERRM)||', ';
    ROLLBACK;
    write_audit(juror_no, completed_date, delete_failed||lc_table_deletions);
    lb_failed := TRUE;
  END;
END delete_juror_responses_aud;

-- =================================================================================================
-- =================================================================================================

PROCEDURE del_juror_resp_cjs_employment(juror_no varchar2, completed_date date) IS

BEGIN

    DELETE FROM JUROR_DIGITAL.juror_response_cjs_employment
    WHERE juror_number = juror_no;

    lc_table_deletions := lc_table_deletions||' TABLE juror_response_cjs_employment :'||TO_CHAR(SQL%ROWCOUNT)||', ';

EXCEPTION
when others then
  BEGIN
    lc_table_deletions := lc_table_deletions||' TABLE juror_response_cjs_employment failed :'||TO_CHAR(SQLERRM)||', ';
    ROLLBACK;
    write_audit(juror_no, completed_date, delete_failed||lc_table_deletions);
    lb_failed := TRUE;
  END;
END del_juror_resp_cjs_employment;

-- =================================================================================================
-- =================================================================================================

PROCEDURE del_juror_resp_special_needs(juror_no varchar2, completed_date date) IS

BEGIN

    DELETE FROM JUROR_DIGITAL.juror_response_special_needs
    WHERE juror_number = juror_no;

    lc_table_deletions := lc_table_deletions||' TABLE juror_response_special_needs :'||TO_CHAR(SQL%ROWCOUNT)||', ';

EXCEPTION
when others then
  BEGIN
    lc_table_deletions := lc_table_deletions||' TABLE juror_response_special_needs failed :'||TO_CHAR(SQLERRM)||', ';
    ROLLBACK;
    write_audit(juror_no, completed_date, delete_failed||lc_table_deletions);
    lb_failed := TRUE;
  END;
END del_juror_resp_special_needs;

-- =================================================================================================
-- =================================================================================================

PROCEDURE delete_change_log_item(juror_no varchar2, completed_date date) IS

BEGIN

    DELETE FROM juror_digital.change_log_item
    WHERE change_log in (
                          SELECT i.change_log FROM juror_digital.change_log_item i
                          INNER JOIN juror_digital.change_log_view c
                          ON i.change_log = c.id
                          AND c.juror_number = juror_no
                        );

    lc_table_deletions := lc_table_deletions||' TABLE change_log_item :'||TO_CHAR(SQL%ROWCOUNT)||', ';

EXCEPTION
when others then
  BEGIN
    lc_table_deletions := lc_table_deletions||' TABLE change_log_item failed :'||TO_CHAR(SQLERRM)||', ';
    ROLLBACK;
    write_audit(juror_no, completed_date, delete_failed||lc_table_deletions);
    lb_failed := TRUE;
  END;
END delete_change_log_item;

-- =================================================================================================
-- =================================================================================================

PROCEDURE delete_change_log(juror_no varchar2, completed_date date) IS

BEGIN

    DELETE FROM JUROR_DIGITAL.change_log_view
    WHERE juror_number = juror_no;

    lc_table_deletions := lc_table_deletions||' TABLE change_log :'||TO_CHAR(SQL%ROWCOUNT)||', ';

EXCEPTION
when others then
  BEGIN
    lc_table_deletions := lc_table_deletions||' TABLE change_log failed :'||TO_CHAR(SQLERRM)||', ';
    ROLLBACK;
    write_audit(juror_no, completed_date, delete_failed||lc_table_deletions);
    lb_failed := TRUE;
  END;
END delete_change_log;

-- =================================================================================================
-- =================================================================================================

PROCEDURE del_staff_juror_response_audit(juror_no varchar2, completed_date date) IS

BEGIN

    DELETE FROM JUROR_DIGITAL.staff_juror_response_audit
    WHERE juror_number = juror_no;

    lc_table_deletions := lc_table_deletions||' TABLE staff_juror_response_audit :'||TO_CHAR(SQL%ROWCOUNT)||', ';

EXCEPTION
when others then
  BEGIN
    lc_table_deletions := lc_table_deletions||' TABLE staff_juror_response_audit failed :'||TO_CHAR(SQLERRM)||', ';
    ROLLBACK;
    write_audit(juror_no, completed_date, delete_failed||lc_table_deletions);
    lb_failed := TRUE;
  END;
END del_staff_juror_response_audit;

-- =================================================================================================
-- =================================================================================================

PROCEDURE delete_juror_response(juror_no varchar2, completed_date date) IS

BEGIN
    DELETE FROM JUROR_DIGITAL.juror_response
    WHERE juror_number = juror_no;

    lc_table_deletions := lc_table_deletions||' TABLE juror_response :'||TO_CHAR(SQL%ROWCOUNT)||', ';

EXCEPTION
when others then
    lc_table_deletions := lc_table_deletions||' TABLE juror_response failed :'||TO_CHAR(SQLERRM)||', ';
    ROLLBACK;
    write_audit(juror_no, completed_date,lc_table_deletions);
    lb_failed := TRUE;
END delete_juror_response;

-- =================================================================================================
-- =================================================================================================

PROCEDURE write_audit(p_juror_no varchar2, p_completed_date date,  p_table_deletions varchar2) IS
pragma autonomous_transaction;

BEGIN
     INSERT INTO JUROR_DIGITAL.JD_HOUSEKEEPING_AUDIT (juror_number, selected_date, deletion_date, deletion_summary)
     VALUES (p_juror_no, p_completed_date, SYSDATE, p_table_deletions);
	 COMMIT;
END write_audit;

-- =================================================================================================
-- =================================================================================================

PROCEDURE perform_deletions(p_retention_threshold number) IS

    CURSOR c_jd_responses(c_retention number) IS
        SELECT
            r.juror_number,
            r.date_received,
            r.processing_status,
            r.processing_complete,
            r.completed_at
        FROM JUROR_DIGITAL.juror_response r
        WHERE r.completed_at < add_months(trunc(sysdate), -12*c_retention);

BEGIN

      li_responses_count := 0;
      li_deleted_count := 0;

      IF (p_retention_threshold < 1 OR p_retention_threshold > 999) THEN
        lc_table_deletions := 'retention period should be between 1 and 999.';
        raise_application_error(-20100, lc_table_deletions);
      END IF;

      FOR juror_rec IN c_jd_responses(p_retention_threshold) LOOP
        lb_failed := FALSE;
        lc_table_deletions := ''|| juror_rec.juror_number||' - ';
        li_responses_count := li_responses_count +1;

        delete_juror_responses_aud(juror_rec.juror_number, juror_rec.completed_at);
        IF lb_failed THEN GOTO Response_Loop; END IF;

        del_juror_resp_cjs_employment(juror_rec.juror_number, juror_rec.completed_at);
        IF lb_failed THEN GOTO Response_Loop; END IF;

        del_juror_resp_special_needs(juror_rec.juror_number, juror_rec.completed_at);
        IF lb_failed THEN GOTO Response_Loop; END IF;

        delete_change_log_item(juror_rec.juror_number, juror_rec.completed_at);
        IF lb_failed THEN GOTO Response_Loop; END IF;

        delete_change_log(juror_rec.juror_number, juror_rec.completed_at);
        IF lb_failed THEN GOTO Response_Loop; END IF;

        del_staff_juror_response_audit(juror_rec.juror_number, juror_rec.completed_at);
        IF lb_failed THEN GOTO Response_Loop; END IF;

        delete_juror_response(juror_rec.juror_number, juror_rec.completed_at);
        IF lb_failed THEN GOTO Response_Loop; END IF;

        write_audit(juror_rec.juror_number, juror_rec.completed_at,lc_table_deletions);
        COMMIT;
        li_deleted_count := li_deleted_count + 1;

        << Response_Loop >>
        NULL;
      END LOOP;

      -- insert summary
      write_audit(NULL, NULL,'responses : '||li_responses_count||' deleted : '||li_deleted_count);

EXCEPTION
  WHEN OTHERS THEN
    write_audit(NULL, NULL,lc_table_deletions);
END perform_deletions;

END JUROR_DIGITAL_HOUSEKEEPING;